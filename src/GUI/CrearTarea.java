/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Classes.DBConnection;
import Classes.Utilities;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.EventObject;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractCellEditor;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.SpinnerListModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.CellEditorListener;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;

/**
 *
 * @author Franco
 */
public class CrearTarea extends javax.swing.JFrame {

    /**
     * Creates new form CrearUsuario
     */
    private Integer id = null;
    private int idProyecto;

    private Vector<Integer> idsTrabajadores = new Vector<>();
    private Vector<Integer> idsTareas = new Vector<>();
    private VentanaTareas ventanaTareas;

    private List<Integer> disponibilidadRecurso = new ArrayList<Integer>();

    private JTable tablaRecursosRequeridos;

    public CrearTarea(VentanaTareas ventanaTareas, int idProyecto, Integer idTarea, JTable tablaRecursosRequeridos) {
        initComponents();
        setLocationRelativeTo(null);
        this.id = idTarea;
        this.tablaRecursosRequeridos = tablaRecursosRequeridos;
        this.ventanaTareas = ventanaTareas;
        this.idProyecto = idProyecto;
        Utilities.getTareasWithList(listDependencias, idsTareas, null, idTarea, null);
        Utilities.getTrabajadoresWithComboBox(comboboxTrabajador, idsTrabajadores);
        Utilities.getRecursosWithTable(tablaRecursos, null);
        configureDisponibilidadCell();
        TableColumn col = tablaRecursos.getColumnModel().getColumn(tablaRecursos.getColumnCount() - 1);
        col.setCellEditor(new SpinnerEditor());

        listDependencias.setCellRenderer(new SelectedListCellRenderer());

    }

    public CrearTarea(VentanaTareas ventanaTareas, int idProyecto, Integer idTarea, String nombre, String responsable,
            int duracion, String fecha_inicio, Object[] tareasRequeridas, JTable tablaRecursosRequeridos) {
        this(ventanaTareas, idProyecto, idTarea, tablaRecursosRequeridos);

        this.setTitle("Modificar Tarea");
        titulo.setText("Modificar Tarea");
        buttonCrearProyecto.setText("Modificar Tarea");
        textfieldNombre.setText(nombre);
        comboboxTrabajador.setSelectedItem(responsable);
        spinnerDuracion.setValue(duracion);
        textfieldFecha.setText(fecha_inicio);

        DefaultListModel model = (DefaultListModel) listDependencias.getModel();
        for (int i = 0; i < tareasRequeridas.length; i++) {
            for (int j = 0; j < model.getSize(); j++) {
                if (model.getElementAt(j).equals(tareasRequeridas[i])) {
                    listDependencias.addSelectionInterval(j, j);
                    break;
                }
            }
        }
    }

    private void configureDisponibilidadCell() {
        if (id != null) {
            for (int i = 0; i < tablaRecursos.getRowCount(); i++) {
                disponibilidadRecurso.add((Integer) tablaRecursos.getValueAt(i, tablaRecursos.getColumnCount() - 1));
                for (int j = 0; j < tablaRecursosRequeridos.getRowCount(); j++) {
                    if (tablaRecursos.getValueAt(i, 0).equals(tablaRecursosRequeridos.getValueAt(j, 0))) {
                        tablaRecursos.setValueAt(tablaRecursosRequeridos.getValueAt(j, 2), i, tablaRecursos.getColumnCount() - 1);
                        break;
                    } else {
                        tablaRecursos.setValueAt(0, i, tablaRecursos.getColumnCount() - 1);
                    }
                }
            }
        } else {
            for (int i = 0; i < tablaRecursos.getRowCount(); i++) {
                disponibilidadRecurso.add((Integer) tablaRecursos.getValueAt(i, tablaRecursos.getColumnCount() - 1));
                tablaRecursos.setValueAt(0, i, tablaRecursos.getColumnCount() - 1);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        titulo = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        buttonCrearProyecto = new javax.swing.JButton();
        comboboxTrabajador = new javax.swing.JComboBox<String>();
        jLabel4 = new javax.swing.JLabel();
        textfieldNombre = new javax.swing.JTextField();
        spinnerDuracion = new javax.swing.JSpinner();
        jLabel10 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        textfieldFecha = new javax.swing.JFormattedTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listDependencias = new javax.swing.JList<String>();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaRecursos = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Crear Tarea");

        titulo.setText("Crear Tarea");

        jLabel2.setText("Responsable");

        jLabel3.setText("Datos del Tarea");

        buttonCrearProyecto.setText("Crear Tarea");
        buttonCrearProyecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCrearProyectoActionPerformed(evt);
            }
        });

        jLabel4.setText("Nombre");

        spinnerDuracion.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        spinnerDuracion.setToolTipText("");
        spinnerDuracion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerDuracionStateChanged(evt);
            }
        });

        jLabel10.setText("Duración (días)");

        jLabel5.setText("Fecha Inicio");

        textfieldFecha.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/mm/yyyy"))));
        textfieldFecha.setText("23/12/2012");
        textfieldFecha.setToolTipText("dd/MM/yyyy");

        jLabel6.setText("Tareas requeridas");

        listDependencias.setToolTipText("Agrege haciendo click. Puede usar ctrl y shift");
        listDependencias.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listDependenciasValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listDependencias);

        jLabel7.setText("Recursos requeridos");

        tablaRecursos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tablaRecursos.setToolTipText("");
        tablaRecursos.setRowHeight(25);
        tablaRecursos.getTableHeader().setReorderingAllowed(false);
        tablaRecursos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaRecursosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablaRecursos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(titulo)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel3)
                                        .addGap(198, 198, 198))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addGap(57, 57, 57)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(comboboxTrabajador, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(textfieldNombre)
                                                    .addComponent(spinnerDuracion, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(textfieldFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addComponent(jLabel10)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel2))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(411, 411, 411)
                        .addComponent(buttonCrearProyecto)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(titulo)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(textfieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(comboboxTrabajador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(spinnerDuracion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(textfieldFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonCrearProyecto)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonCrearProyectoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCrearProyectoActionPerformed
        try {

            String sql, mensaje;
            Integer id = this.id;

            if (this.id == null) {
                sql = "INSERT INTO tarea(nombre, duracion_estimada, fecha_inicio_prevista, "
                        + "id_proyecto, id_trabajador, porcentaje_avance,estado) VALUES ("
                        + "'" + textfieldNombre.getText() + "', "
                        + "" + (int) spinnerDuracion.getValue() + ", "
                        + "'" + textfieldFecha.getText() + "', "
                        + "" + idProyecto + ", "
                        + "" + idsTrabajadores.get(comboboxTrabajador.getSelectedIndex()) + ", "
                        + "0,'No iniciada');";
                mensaje = "Tarea creada satisfactoriamente";

                id = DBConnection.executeQueryReturnID(sql);

            } else {
                sql = "UPDATE public.tarea SET nombre = '"
                        + textfieldNombre.getText() + "', duracion_estimada = "
                        + "" + (int) spinnerDuracion.getValue() + ", fecha_inicio_prevista = "
                        + "'" + textfieldFecha.getText() + "', id_trabajador = "
                        + "" + idsTrabajadores.get(comboboxTrabajador.getSelectedIndex()) + " WHERE id_tarea = " + id + ";";
                mensaje = "Tarea modificada satisfactoriamente";

                DBConnection.executeQuery(sql);

                String sqlAux;

                for (int i = 0; i < tablaRecursos.getRowCount(); i++) {
                    for (int j = 0; j < tablaRecursosRequeridos.getRowCount(); j++) {
                        if (tablaRecursos.getValueAt(i, 0).equals(tablaRecursosRequeridos.getValueAt(j, 0))) {
                            int anterior = (int) tablaRecursosRequeridos.getValueAt(j, tablaRecursosRequeridos.getColumnCount() - 1);
                            int actual = (int) tablaRecursos.getValueAt(i, tablaRecursos.getColumnCount() - 1);

                            disponibilidadRecurso.set(i, disponibilidadRecurso.get(i) - (actual - anterior));
                            sqlAux = "UPDATE recurso SET disponibilidad= "
                                    + disponibilidadRecurso.get(i) + " WHERE id_recurso = "
                                    + tablaRecursosRequeridos.getValueAt(j, 0) + ";";
                            DBConnection.executeQuery(sqlAux);

                            sqlAux = "UPDATE tarea_recurso SET cantidad_uso = "+actual+" WHERE id_tarea = " + id + ";";

                            DBConnection.executeQuery(sqlAux);

                            break;
                        }
                    }
                }

                sqlAux = "DELETE FROM tarea_dependencia WHERE id_tarea = " + id + ";";

                DBConnection.executeQuery(sqlAux);
            }

            //dependecia de tareas
            for (int selectedIndice : listDependencias.getSelectedIndices()) {
                sql = "INSERT INTO tarea_dependencia(id_tarea, id_tarea_requerida) VALUES (" + id + ", " + idsTareas.get(selectedIndice) + ");";
                DBConnection.executeQuery(sql);
            }

            if (this.id == null) {

                //dependencia de recursos
                for (int i = 0; i < tablaRecursos.getRowCount(); i++) {
                    int cantidad = (int) tablaRecursos.getValueAt(i, tablaRecursos.getColumnCount() - 1);
                    if (cantidad != 0) {
                        sql = "INSERT INTO tarea_recurso(id_tarea, id_recurso, cantidad_uso) VALUES (" + id + ", "
                                + tablaRecursos.getValueAt(i, 0) + ", " + cantidad + ");";
                        DBConnection.executeQuery(sql);

                        sql = "UPDATE recurso SET disponibilidad= " + (disponibilidadRecurso.get(i) - cantidad) + " WHERE id_recurso = " + tablaRecursos.getValueAt(i, 0) + ";";
                        DBConnection.executeQuery(sql);
                    }
                }
            }

            JOptionPane.showMessageDialog(this, mensaje);
            ventanaTareas.updateData();
            dispose();

        } catch (Exception ex) {
            Logger.getLogger(CrearTarea.class.getName()).log(Level.SEVERE, null, ex);
            Utilities.showErrorMessage(ex.getMessage());
        }
    }//GEN-LAST:event_buttonCrearProyectoActionPerformed

    private void tablaRecursosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaRecursosMouseClicked
        System.out.println("valor " + tablaRecursos.getValueAt(tablaRecursos.getSelectedRow(), tablaRecursos.getColumnCount() - 1));
    }//GEN-LAST:event_tablaRecursosMouseClicked

    private void listDependenciasValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listDependenciasValueChanged
        if (!evt.getValueIsAdjusting()) {
            System.out.println(listDependencias.getSelectedValuesList());
        }
    }//GEN-LAST:event_listDependenciasValueChanged

    private void spinnerDuracionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerDuracionStateChanged
        System.out.println(spinnerDuracion.getValue());
    }//GEN-LAST:event_spinnerDuracionStateChanged

    public class SelectedListCellRenderer extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            Component c = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            if (isSelected) {
                c.setBackground(Color.GREEN);
            }
            return c;
        }
    }

    class SpinnerEditor extends AbstractCellEditor implements TableCellEditor {

        final JSpinner spinner = new JSpinner();

        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected,
                int row, int column) {
            if (((int) value) > (int) disponibilidadRecurso.get(row)) {
                spinner.setModel(new SpinnerNumberModel((int) value, 0, (int) value, 1));
            } else {
                spinner.setModel(new SpinnerNumberModel((int) value, 0, (int) disponibilidadRecurso.get(row), 1));
            }

            return spinner;
        }

        public boolean isCellEditable(EventObject evt) {

            return true;
        }

        public Object getCellEditorValue() {
            return spinner.getValue();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CrearTarea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CrearTarea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CrearTarea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CrearTarea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CrearTarea(null, 0, null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCrearProyecto;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> comboboxTrabajador;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> listDependencias;
    private javax.swing.JSpinner spinnerDuracion;
    private javax.swing.JTable tablaRecursos;
    private javax.swing.JFormattedTextField textfieldFecha;
    private javax.swing.JTextField textfieldNombre;
    private javax.swing.JLabel titulo;
    // End of variables declaration//GEN-END:variables
}
